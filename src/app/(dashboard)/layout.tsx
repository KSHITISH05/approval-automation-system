// /src/app/(dashboard)/layout.tsx

export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
/*
This layout file serves as the root layout for the entire dashboard section of the application. Here's a detailed explanation:

1. Root Layout Structure:
   - This is a special Next.js layout file that wraps all pages within the (dashboard) route group
   - The (dashboard) folder name in parentheses indicates it's a route group that doesn't affect the URL structure
   - Provides the basic HTML structure (html and body tags) for all dashboard pages

2. Metadata Configuration:
   - Exports metadata object to configure page metadata
   - Sets default title to 'Next.js'
   - Sets default description to 'Generated by Next.js'
   - This metadata can be overridden by individual pages

3. Layout Component:
   - Exports default RootLayout component that takes children as prop
   - Children prop represents the content of any page/layout rendered within this layout
   - Provides basic HTML structure with:
     * html tag with lang="en" for accessibility
     * body tag containing the children content
   - Serves as the outermost wrapper for all dashboard routes

4. Purpose:
   - Ensures consistent HTML structure across all dashboard pages
   - Provides a place to add common elements needed across dashboard
   - Allows for shared styling, scripts, or components
   - Enables metadata configuration for SEO

5. Integration:
   - Works with Next.js App Router
   - Automatically applied to all routes under /dashboard
   - Can be combined with more specific layouts in subdirectories
   - Supports nested layouts for more complex page structures

This layout is fundamental to the application structure, providing the base HTML 
template and ensuring proper document structure for all dashboard pages while 
allowing for flexible content rendering within.
*/
